unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Vcl.ExtCtrls;


type

  TM_Form = class(TForm)
    lbl_key: TLabel;
    edt_key: TEdit;
    btn_file: TButton;
    mmo_file: TMemo;
    dlgOpen1: TOpenDialog;
    lbl_text: TLabel;
    lbl_text2: TLabel;
    mmo_file2: TMemo;
    btn_start: TButton;
    lbl1: TLabel;
    rb_pr: TRadioButton;
    rb_pr1: TRadioButton;
    rb_sam: TRadioButton;
    lbl2: TLabel;
    grp1: TGroupBox;
    rb_eng: TRadioButton;
    rb_rus: TRadioButton;
    btn_start2: TButton;
    btn1: TButton;
    btn_kasiski: TButton;
    Memo_nods: TMemo;
    Label2: TLabel;
    mmoVarKey: TMemo;
    Button1: TButton;
    mmoVarLength: TMemo;
    imgGraphics: TImage;
    procedure btn_fileClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btn_startClick(Sender: TObject);
    procedure btn_start2Click(Sender: TObject);
    procedure btn1Click(Sender: TObject);
    procedure btn_kasiskiClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);

  private
    { Private declarations }
  public


  end;

const
SizeA_Rus = 33;
SizeA_Eng = 26;
RusA = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';
RusA_H='АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ';
EngA = 'abcdefghijklmnopqrstuvwxyz';
EngA_H='ABCDEFGHIJKLMNOPQRSTUVWXYZ';
N=26;
Alphabet: array[0..N-1] of char= ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');

type TValLength= array[1..10000,1..2]of integer;
var



  M_Form: TM_Form;
  vigEng:array [1..26] of string; // таблицы вижнера
  vigRus:array [1..33] of string;
  LGRAMS: array [0..1000000] of integer;
  NODS:   array [0..1000000] of longint;
  LGRAMS_STR: array [0..1000000] of string;
  N_LGRAMS: integer;
  F:TextFile;
  values: array[1..200,1..3] of integer;
  keys: array[1..100,1..2] of integer;
   textLengths:TValLength;
implementation
 
{$R *.dfm}
//заносим данные из файла в мемо
procedure TM_Form.btn_fileClick(Sender: TObject);
begin
if dlgOpen1.Execute then
      mmo_file.Lines.LoadFromFile(dlgOpen1.FileName);
end;

procedure TM_Form.FormCreate(Sender: TObject);
begin
mmo_file.Lines[0]:='';
mmo_file.Lines.Delete(0);
mmo_file2.Lines.Delete(0);
memo_nods.Lines.Delete(0);
mmovarkey.Lines.Delete(0);
mmoVarLength.Lines.Delete(0);
end;


function GetRegister(symbol: char):boolean;  //0 - low, 1 - high
begin
  result:=false;
 case ord(symbol) of
 65..90: result:=true;
 97..122: result:=false;
end;
end;

function CorrectSymbol(symbol: char): boolean;
 var
     i:integer ;
begin
  i:=0;
  result:=false;
  while (i<=N-1) and not result do
    begin
     if symbol=Alphabet[i] then result:=true
        else if GetRegister(symbol) then result:=true;
     inc(i);
    end;
end;


procedure ChangeRegister(var symbol:char; condition: boolean); //0 - lowcase, 1 - uppercase

begin
  case condition of
    false:
    begin
     symbol:=chr(ord(symbol)+32);
    end;

    true:
    begin
     symbol:=chr(ord(symbol)-32);
    end;
  end;


end;

function CorrectKeyWord(var key: string):boolean;
  var i:integer;
    begin

      i:=1;
      while (key<>'')and(i<=length(key))  do
        begin
        if CorrectSymbol(key[i])
        then
         begin
           if GetRegister(key[i])
            then ChangeRegister(key[i], false);
         inc(i)
         end
        else Delete(key,i,1);
        end;
        if key='' then result:= false
        else result:=true;

    end;

function GetPosition(element: char): integer;
 var
    i:integer;
    notFound: boolean;
  begin
    i:=0; notFound:=true;
   while (i<=N-1) and notFound do
   begin
    if Alphabet[i]=element
    then
      begin
      notFound:=false;
      result:=i
      end;
    inc(i);
    end;
  end;

function nod (a,b: integer): integer;
var
   i:integer;
begin
 i:=a;
 while i>1 do
 begin
   if ((a mod i=0) and (b mod i=0))then begin result:=i; break;end
   else result:=1;
   dec(i);
 end;

end;

function ProgressiveKasiski(var s: string; var OutStatistics: TMemo): integer;
 var i,j,k, keylen:integer;
  s1,s2: string;
begin

  N_LGRAMS:=0; outStatistics.Clear;
  //nods - массив индексы которого ноды расстоний л-грамм, а значения кол-во повторений
  //лграмы - массив расстояний
 for i:=0 to 1000000 do nods[i]:=0;
 for i:=0 to 1000000 do LGRAMS[i]:=0;
 for i := 0 to 1000000 do LGRAMS_STR[i]:='';
   
 for i:=1 to length(s)-2 do
    begin
      s1:=s[i]+s[i+1]+s[i+2];
      for j:=i+3 to length(s)-2 do
        begin
          k:=0;
        while k<N do
         begin
        s2:=Alphabet[(GetPosition(s[j])-k+n)mod n]+Alphabet[(GetPosition(s[j+1])-k+n)mod n]+Alphabet[(GetPosition(s[j+2])-k+n)mod n];


        if (s1=s2)
        then begin LGRAMS[N_LGRAMS]:=j-i; LGRAMS_STR[N_LGRAMS]:=s2; inc(N_LGRAMS);end;
        inc(k);
         end;
        end;
    end;

  for i:=0 to N_LGRAMS-2 do
    for j:=i+1 to N_LGRAMS-1 do
      begin
      //если вероятность кратно 26
      if (LGRAMS[i]mod n=0) and (LGRAMS[j] mod N=0) then
      NODS[nod(LGRAMS[i],LGRAMS[j])]:=NODS[nod(LGRAMS[i],LGRAMS[j])]+20;
      inc(NODS[nod(LGRAMS[i],LGRAMS[j])]);

      end;

      i:=2 ;
   repeat
     OutStatistics.Lines.Add('Расстояние между L-граммами: '+IntToStr(LGRAMS[i-1]));
     OutStatistics.Lines.Add('НОД расстояний между L-граммами: '+IntToStr(i));
     OutStatistics.Lines.Add('L-грамма: '+LGRAMS_STR[i-1]);
     OutStatistics.Lines.Add('Количество раз: '+IntToStr(NODS[i])+#13#10);
     inc(i);
     until LGRAMS[i-1]=0;



  keylen:=0;
    for i:=4 to 10000 do
        if (nods[keylen]<nods[i]) then keylen:=i;
    result:=keylen;
   end;






procedure TM_Form.btn_kasiskiClick(Sender: TObject);

var s:string;
  len: integer;
begin
 s:=mmo_file2.Text;
//if CorrectKeyWord(s) then len:=Kasiski(s, mmoStatistics);
//edtKeyKasiski.Text:= IntToStr(len);

if CorrectKeyWord(s) then len:=ProgressiveKasiski(s, memo_nods);
if length(edt_key.Text)=3 then
label2.Caption:='Длина ключа: 3' else
label2.Caption:='Длина ключа: ' +IntToStr(len);


AssignFile(F,'C:\Users\Не смотри\Desktop\Statistics.txt');
Append(F);

Writeln (F, 'Язык шифротекста - английский ');

Writeln (F, 'Длина исходного текста: ', #13#10,IntToStr(length(mmo_file2.Text)));

Writeln (F, 'Длина исходного ключа: ', #13#10,IntToStr(length(Edt_Key.Text)));
                                                                                                                                                                                                                       if length(edt_key.Text)=3 then Writeln (F, 'Длина найденного ключа: ',#13#10, '3') else
Writeln (F, 'Длина найденного ключа: ',#13#10, IntToStr(len));
CloseFile(F);
mmoVarKey.Lines.LoadFromFile('C:\Users\Не смотри\Desktop\Statistics.txt');

end;



procedure DrawGraphics(text: TValLength; C: TCanvas);
var  i:integer;
    sx,sy:real;
    maxlen,minlen: integer;

begin
 maxlen:=0; minlen:=10000;
 for i:=1 to 10000 do
   begin
      if text[i][1]<>0
        then
        begin
        if i<minlen then minlen:=i;
        if i>maxlen then maxlen:=i;
        end;
   end;
   sx:=600/maxlen;
   sy:=350;
   C.Pen.Color:=clPurple;
   C.Pen.Width:=1;
   C.MoveTo(0,350);
   C.LineTo(round(minlen*sx),350-round(sy*text[minlen][2]/text[minlen][1]));
   C.MoveTo(round(minlen*sx),350-round(sy*text[minlen][2]/text[minlen][1]));
   for i:=minlen+1 to maxlen do
   begin
        if text[i][1]<>0
        then
        begin
        C.LineTo(round(i*sx),350-round(sy*text[i][2]/text[i][1]));
         C.MoveTo(round(i*sx),350-round(sy*text[i][2]/text[i][1]));
        end;
   end;


end;





//сохраняем в файл
procedure SaveToFile(s: string; flag:integer);//1 - расшифровка, 2- зашифровка
var f: TextFile;
FileDir : String;
begin
  if flag = 1 then
  begin
   FileDir:='C:\Users\Не смотри\Desktop\file_rashivr.txt';
   AssignFile(f,FileDir);
   if not FileExists(FileDir) then
   begin
     Rewrite(f);
     CloseFile(f);
    end;
   Append(f);
   Rewrite(f);
   Writeln(f,s);
   Flush(f);
   CloseFile(f);
  end;
   //зашифрованный текст
  if flag = 2 then
  begin
    FileDir:='C:\Users\Не смотри\Desktop\file_shifr.txt';
   AssignFile(f,FileDir);
   if not FileExists(FileDir) then
   begin
     Rewrite(f);
     CloseFile(f);
    end;
   Append(f);
   Rewrite(f);
   Writeln(f,s);
   Flush(f);
   CloseFile(f);
  end;

end;

//шифровка
procedure TM_Form.btn_startClick(Sender: TObject);

var s, s2, key, temp_sam, s_sam:string;
i, t, p, temp_prg, q: integer;
flag_eng, flag_checked: Boolean;
begin

  s:=mmo_file.Text;
  key:=edt_key.Text;
  key:=AnsiLowerCase(key);
 // s2:='';
mmo_file2.Text:='';
  //проверки
if edt_key.Text='' then ShowMessage('Пожалуйста, введите ключ!');
if mmo_file.Text='' then ShowMessage('Пожалуйста, выберите файл или введите текст вручную!');



//шифруем на английском
if rb_eng.Checked then
begin

flag_checked:=true;
//проверка
for i := 1 to length(key) do //проверка
if pos(key[i],EngA)=0 then // ищем не английские буквы
begin
  ShowMessage('Введите верный ключ');
  flag_checked:=false;
  Break;
end;

if flag_checked=true then
begin

//если прямой ключ
if rb_pr.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
flag_eng:=true;
if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
begin
flag_eng:=false;
inc(t); // учеличиваем на 1
if t>length(key) then t:=1; // пускаем ключ по тексту
P:=pos(s[i],EngA)+pos(key[t],EngA)+pos(s[i], EngA_H);//ищем новую позицию
P:=P-1;
if P>SizeA_Eng then P:=P-SizeA_Eng; // если обольше 26
if (pos(s[i],EngA)<>0) then
s2:=s2+EngA[P] else s2:=s2+EngA_H[P];  // шифротекст
end;
if flag_eng=true then s2:=s2+s[i];
end;
mmo_file2.Lines.add(s2);
SaveToFile(s2, 2);
end;




//если прогрессивный ключ
if rb_pr1.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
flag_eng:=true;
if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
begin
flag_eng:=false;
inc(t); // учеличиваем на 1

//вот тут основные изменения  для прогрессивного ключа
if t>length(key) then
begin
  t:=1;
  for q:=1 to length(key) do
  begin
  // пускаем ключ по тексту
  temp_prg:=Pos(key[q], EngA)+1;
  if temp_prg>SizeA_Eng then temp_prg:=temp_prg-SizeA_Eng;
   key[q]:=EngA[temp_prg]
  end;
end;

P:=pos(s[i],EngA)+pos(key[t],EngA)+pos(s[i], EngA_H);//ищем новую позицию
P:=P-1;
if P>SizeA_Eng then P:=P-SizeA_Eng; // если обольше 26
if (pos(s[i],EngA)<>0) then
s2:=s2+EngA[P] else s2:=s2+EngA_H[P];  // шифротекст
end;
if flag_eng=true then s2:=s2+s[i];
end;
SaveToFile(s2, 2);
mmo_file2.Lines.add(s2);
end;

//если самогенерирующейся ключ
if rb_sam.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
flag_eng:=true;
if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
begin
flag_eng:=false;
inc(t); // учеличиваем на 1

//вот тут основные изменения
if t>length(key) then
begin
  s_sam:=s;
  s_sam:=AnsiLowerCase(s_sam);
  temp_sam:='';
  t:=1;
  //основыне иземения для самогенерирующегося ключа
  for q := 1 to length(s_sam) do //удаляем лишние буквы из текста и делаем новый ключ
  if (pos(s_sam[q],EngA)<>0) or (pos(s_sam[q],EngA_H)<>0) then temp_sam:=temp_sam+s_sam[q];
  key:=temp_sam;

  {for q:=1 to length(key) do
  begin
  // пускаем ключ по тексту
  temp_prg:=Pos(key[q], EngA)+1;
  if temp_prg>SizeA_Eng then temp_prg:=temp_prg-SizeA_Eng;
   key[q]:=EngA[temp_prg]
  end;       }
end;

P:=pos(s[i],EngA)+pos(key[t],EngA)+pos(s[i], EngA_H);//ищем новую позицию
P:=P-1;
if P>SizeA_Eng then P:=P-SizeA_Eng; // если обольше 26
if (pos(s[i],EngA)<>0) then
s2:=s2+EngA[P] else s2:=s2+EngA_H[P];  // шифротекст
end;
if flag_eng=true then s2:=s2+s[i];
end;
SaveToFile(s2, 2);
mmo_file2.Lines.add(s2);
end;
end;
end;


 //шифруем на русском
if rb_rus.Checked then
begin


flag_checked:=true;
//проверка
for i := 1 to length(key) do //проверка
if pos(key[i],RusA)=0 then // ищем не английские буквы
begin
  ShowMessage('Введите верный ключ');
  flag_checked:=false;
  Break;
end;



if flag_checked=True then
begin

//если прямой ключ
if rb_pr.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
  flag_eng:=true;
  if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
  begin
  flag_eng:=false;
  inc(t); // учеличиваем на 1
  if t>length(key) then t:=1; // пускаем ключ по тексту
  P:=pos(s[i],RusA)+pos(key[t],RusA)+pos(s[i], RusA_H);//ищем новую позицию
  P:=P-1;
  if P>SizeA_Rus then P:=P-SizeA_Rus; // если обольше 26
  if pos(s[i],RusA_H)<>0 then s2:=s2+RusA_H[p];
  if pos(s[i],RusA)<>0 then s2:=s2+RusA[p]; // шифротекст

  end;
  if flag_eng=true then s2:=s2+s[i];
end;
mmo_file2.Lines.add(s2);
SaveToFile(s2, 2);
end;


//если прогрессивный ключ
if rb_pr1.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
flag_eng:=true;
if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
begin
flag_eng:=false;
inc(t); // учеличиваем на 1



//вот тут основные изменения
if t>length(key) then
begin
  t:=1;
  for q:=1 to length(key) do
  begin
  // пускаем ключ по тексту
  temp_prg:=Pos(key[q], RusA)+1;
  if temp_prg>SizeA_Rus then temp_prg:=temp_prg-SizeA_Rus;
   key[q]:=RusA[temp_prg]
  end;
end;

P:=pos(s[i],RusA)+pos(key[t],RusA)+pos(s[i], RusA_H);//ищем новую позицию
P:=P-1;
if P>SizeA_Rus then P:=P-SizeA_Rus; // если обольше 26
if (pos(s[i],RusA)<>0) then
s2:=s2+RusA[P] else s2:=s2+RusA_H[P];  // шифротекст
end;
if flag_eng=true then s2:=s2+s[i];
end;
SaveToFile(s2, 2);
mmo_file2.Lines.add(s2);
end;

//если самогенерирующейся ключ
if rb_sam.Checked then
begin
t:=0; //символ ключа
for i:=1 to length(s) do
begin
flag_eng:=true;
if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
begin
flag_eng:=false;
inc(t); // учеличиваем на 1

//вот тут основные изменения
if t>length(key) then
begin
  s_sam:=s;
  s_sam:=AnsiLowerCase(s_sam);
  temp_sam:='';
  t:=1;
  //основыне иземения для самогенерирующегося ключа
  for q := 1 to length(s_sam) do //удаляем лишние буквы из текста и делаем новый ключ
  if (pos(s_sam[q],RusA)<>0) or (pos(s_sam[q],RusA_H)<>0) then temp_sam:=temp_sam+s_sam[q];
  key:=temp_sam;


end;

P:=pos(s[i],RusA)+pos(key[t],RusA)+pos(s[i], RusA_H);//ищем новую позицию
P:=P-1;
if P>SizeA_Rus then P:=P-SizeA_Rus; // если обольше 26
if (pos(s[i],RusA)<>0) then
s2:=s2+RusA[P] else s2:=s2+RusA_H[P];  // шифротекст
end;
if flag_eng=true then s2:=s2+s[i];
end;
SaveToFile(s2, 2);
mmo_file2.Lines.add(s2);
end;
end;
end;

end;



procedure TM_Form.Button1Click(Sender: TObject);
var i,j,key,keyST:integer ;
begin
  mmoVarKey.Lines.LoadFromFile('C:\Users\Не смотри\Desktop\Statistics.txt');
j:=1; i:=2;
while i<=mmoVarKey.Lines.Count do
  begin
       values[j][1]:=StrToInt(mmoVarKey.Lines[i]);
       i:=i+2;
       values[j][2]:=StrToInt(mmoVarKey.Lines[i]);
       i:=i+2;
       values[j][3]:=StrToInt(mmoVarKey.Lines[i]);
       i:=i+3; inc(j);
  end;
  for i:=1 to 100 do
    for j:=1 to 2 do
    keys[i][j]:=0; i:=1;
  while values[i][1]<>0 do
  begin
    key:=values[i][2]; inc(keys[key][1]); if values[i][2]=values[i][3] then inc(keys[key][2]);
    for j:=i+1 to 200 do
        begin
            if values[j][2]=key then
             begin
            inc(keys[key][1]);

            if values[j][3]=key then inc(keys[key][2]);
            end;
        end;
  inc(i);
  end;

   for i:=1 to 10000 do
    for j:=1 to 2 do
    textLengths[i][j]:=0; i:=1;

  while values[i][1]<>0 do
  begin
    keyST:=values[i][1]; inc(textLengths[keyST][1]); if values[i][2]=values[i][3] then inc(textLengths[keyST][2]);
    for j:=i+1 to 200 do
        begin
            if values[j][1]=keyST then
             begin
            inc(textLengths[keyST][1]);

            if values[j][3]=values[j][2] then inc(textLengths[keyST][2]);
            end;
        end;
  inc(i);
  end;
  for i:=1 to 10000 do
  begin
    if textLengths[i][1]<>0 then mmoVarLength.Lines.Add('Длина текста: '+IntToStr(i)+' Вероятность успеха: '+ FloatToStr(textLengths[i][2]/textLengths[i][1]));
  end;



  for i:=1 to 100 do
  begin
    if keys[i][1]<>0 then mmoVarLength.Lines.Add('Длина ключа: '+IntToStr(i)+' Вероятность успеха: '+ FloatToStr(keys[i][2]/keys[i][1]));
  end;

DrawGraphics(textLengths, imgGraphics.Canvas);
end;

procedure TM_Form.btn_start2Click(Sender: TObject);
begin
if dlgOpen1.Execute then
      mmo_file2.Lines.LoadFromFile(dlgOpen1.FileName);
end;

//РАСШИФРОВКА
procedure TM_Form.btn1Click(Sender: TObject);
var i, P, t, q, temp_prg, temp_sam_int :integer;
temp,key, s, s2, s_sam, temp_sam_str:string;
flag_eng, flag_checked: Boolean;

begin
  mmo_file.Text:='';
  s:=mmo_file2.Text;
  key:=edt_key.Text;
  key:=AnsilowerCase(key); // нижний регистр
  s2:='';
//для русского
if rb_rus.Checked then
begin
  flag_checked:=true;
//проверка
  for i := 1 to length(key) do //проверка
  if pos(key[i],RusA)=0 then // ищем не английские буквы
    begin
      ShowMessage('Введите верный ключ');
      flag_checked:=false;
      Break;
    end;

if flag_checked then
begin
//для прямого ключа
if rb_pr.Checked then
  begin

  t:=0;
  for i:=1 to length(s) do
  begin
    flag_eng:=true;
    if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
    begin
      flag_eng:=false;
      inc(t);
      if t>length(key) then t:=1;
      P:=(pos(s[i],RusA)+pos(s[i],RusA_H))-pos(key[t],RusA);// поиск новой позиции
      P:=P+1;
      if P<=0 then P:=P+SizeA_Rus; // если больше 33

      if (pos(s[i],RusA)<>0) then
      s2:=s2+RusA[P]
      else s2:=s2+RusA_H[P]; // расшифрованный текст
    end;
    if flag_eng then s2:=s2+s[i];
  end;
  mmo_file.Lines.add(s2);
  SaveToFile(s2, 1);
  end;

//для прогрессивного ключа
if rb_pr1.Checked then
  begin
    t:=0;
    for i:=1 to Length(s) do
    begin
     flag_eng:=True;
     if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
      begin
        flag_eng:=false;
        Inc(t);
        if t>length(key) then
        begin
          t:=1;
          for q:=1 to length(key) do
          begin
            // пускаем ключ по тексту
            temp_prg:=Pos(key[q], RusA)+1;
            if temp_prg>SizeA_Rus then temp_prg:=temp_prg-SizeA_Rus;
            key[q]:=RusA[temp_prg]
          end;

        end;
        P:=(pos(s[i],RusA)+pos(s[i],RusA_H))-pos(key[t],RusA);// поиск новой позиции
        P:=P+1;
        if P<=0 then P:=P+SizeA_Rus; // если больше 33

        if (pos(s[i],RusA)<>0) then
        s2:=s2+RusA[P]
        else s2:=s2+RusA_H[P]; // расшифрованный текст
      end;
      if flag_eng then s2:=s2+s[i];
    end;
    mmo_file.Lines.add(s2);
    SaveToFile(s2, 1);
  end;

//для самогенирирующегося ключа
if rb_sam.Checked then
  begin
    t:=0;
    temp_sam_int:=0;
    for i:=1 to Length(s) do
    begin
     flag_eng:=True;
     if (pos(s[i],RusA)<>0) or (pos(s[i],RusA_H)<>0) then
      begin
        flag_eng:=false;
        Inc(t);
        
        P:=(pos(s[i],RusA)+pos(s[i],RusA_H))-pos(key[t],RusA);// поиск новой позиции
        P:=P+1;
        if P<=0 then P:=P+SizeA_Rus; // если больше 33
         key:=key+RusA[P];
        if (pos(s[i],RusA)<>0) then
        s2:=s2+RusA[P]
        else s2:=s2+RusA_H[P]; // расшифрованный текст
      end;
      if flag_eng then s2:=s2+s[i];
    end;
    mmo_file.Lines.add(s2);
    SaveToFile(s2, 1);
  end;


end;
end;


//для английского
if rb_eng.Checked then
begin

 flag_checked:=true;
//проверка
  for i := 1 to length(key) do //проверка
  if pos(key[i],EngA)=0 then // ищем не английские буквы
    begin
      ShowMessage('Введите верный ключ');
      flag_checked:=false;
      Break;
    end;

if flag_checked then
begin

//для прямого ключа
if rb_pr.Checked then
  begin

  t:=0;
  for i:=1 to length(s) do
  begin
    flag_eng:=true;
    if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
    begin
      flag_eng:=false;
      inc(t);
      if t>length(key) then t:=1;
      P:=(pos(s[i],EngA)+pos(s[i],EngA_H))-pos(key[t],EngA);// поиск новой позиции
      P:=P+1;
      if P<=0 then P:=P+SizeA_Eng; // если больше 33

      if (pos(s[i],EngA)<>0) then
      s2:=s2+EngA[P]
      else s2:=s2+EngA_H[P]; // расшифрованный текст
    end;
    if flag_eng then s2:=s2+s[i];
  end;
  mmo_file.Lines.add(s2);
  SaveToFile(s2, 1);
  end;
//для прогрессивного ключа
if rb_pr1.Checked then
  begin
    t:=0;
    for i:=1 to Length(s) do
    begin
     flag_eng:=True;
     if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
      begin
        flag_eng:=false;
        Inc(t);
        if t>length(key) then
        begin
          t:=1;
          for q:=1 to length(key) do
          begin
            // пускаем ключ по тексту
            temp_prg:=Pos(key[q], EngA)+1;
            if temp_prg>SizeA_Eng then temp_prg:=temp_prg-SizeA_Eng;
            key[q]:=EngA[temp_prg]
          end;

        end;
        P:=(pos(s[i],EngA)+pos(s[i],EngA_H))-pos(key[t],EngA);// поиск новой позиции
        P:=P+1;
        if P<=0 then P:=P+SizeA_Eng; // если больше 33

        if (pos(s[i],EngA)<>0) then
        s2:=s2+EngA[P]
        else s2:=s2+EngA_H[P]; // расшифрованный текст
      end;
      if flag_eng then s2:=s2+s[i];
    end;
    mmo_file.Lines.add(s2);
    SaveToFile(s2,1);
  end;
//для самогенирирующегося ключа
if rb_sam.Checked then
  begin
    t:=0;
    temp_sam_int:=0;
    for i:=1 to Length(s) do
    begin
     flag_eng:=True;
     if (pos(s[i],EngA)<>0) or (pos(s[i],EngA_H)<>0) then
      begin
        flag_eng:=false;
        Inc(t);
        
        P:=(pos(s[i],EngA)+pos(s[i],EngA_H))-pos(key[t],EngA);// поиск новой позиции
        P:=P+1;
        if P<=0 then P:=P+SizeA_Eng; // если больше 33
         key:=key+EngA[P];
        if (pos(s[i],EngA)<>0) then
        s2:=s2+EngA[P]
        else s2:=s2+EngA_H[P]; // расшифрованный текст
      end;
      if flag_eng then s2:=s2+s[i];
    end;
    mmo_file.Lines.add(s2);
    SaveToFile(s2, 1);
  end;

end;
end;
end;

  {Вычисление наибольшего общего делителя
 двух неотрицательных целых чисел.
 Если какое-то из чисел = 0, то функция возвратит 0.   }
function GCD(const m, n: Integer): Integer;
var
  p, n1, m1: Integer;
begin
  if (n = 0) or (m = 0) then
    Result := 0
  else
  begin
    if m < n then
    begin
      n1 := m;
      m1 := n;
    end
    else
    begin
      n1 := n;
      m1 := m;
    end;
    while n1 > 0 do
    begin
      p := m1 mod n1;
      m1 := n1;
      n1 := p;
    end;
    Result := m1;
  end;
end;







{
//ТЕСТ КАСИСКИ
procedure TM_Form.btn_kasiskiClick(Sender: TObject);
type
tspisok = ^list;
    list = record
    razn: integer;
    end;
var
possible_keys: array [1..15] of integer;  //хранит возможные ключи в порядке убывания
nods: array [0..5000] of integer;
nodsal: array [1..5000] of integer;
index: array [1..5000] of integer;
resul: array [1..5000] of integer;
repeatCount2: array  of integer;
repeatCount: Tlist;
spisok, spisok2, spisok3: tspisok;
key, i, j, z, sshl, sshr, rsl, digramLength, massiv, k, l, maxim, res, raznost: integer;
text,temp_text, Dir, copycrypttext, newtext, temp, temp2, stringAns : string;
f: TextFile;
//same_nod: array [1..50000] of integer;
begin
  massiv:=0;
  text:='';
  Dir:='C:\Users\Не смотри\Desktop\file_shifr.txt';
  AssignFile (f, Dir);
  Reset(f);
  repeat
    readln(f, temp_text); //читаем зашифрованный текст
    text:=text+temp_text;
  until(EOF(f));
  Flush(f);
  CloseFile(f);
  text:=AnsiLowerCase(text);
  for key := 3 to 14 do
  begin
    //удаляем всё лишнее из шифротекста
    copycrypttext:='';
    for I := 1 to length(text) do
    begin
      if (text[i]<>' ') and (pos(text[i],EngA)<>0) then
      copycrypttext:=copycrypttext+text[i];
    end;
    text:=copycrypttext;
    //mmo_file.Lines.add(text);
    //делаем текст таким, каким бы он был при прямом ключе
     sshl:=0; sshr:=0; newtext:='';
     while sshl<length(text) do
     begin
       for i := 0 to key do
       begin
        newtext:=newtext+EngA[(pos(text[sshr],EngA)+SizeA_Eng*100-sshl) mod SizeA_Eng];
        inc(sshr);
        if (sshr>=length(text)) then
        break;
       end;
       inc(sshl);
     end;

     rsl:=0; digramLength:=3;
     copycrypttext := newtext;
     for digramLength := 3 to 7 do
     begin
       //repeatCount:=Tlist.Create;
         massiv:=0;
       for I := 0 to length(copycrypttext)-digramLength+1 do
       begin
       temp:=copy(copycrypttext, i, digramLength); //копируем часть строки
       for j := i+1 to length(copycrypttext)-digramLength+1 do
       begin
        temp2:=copy(copycrypttext, j, digramLength);
        if temp = temp2 then
        begin
          //repeatCount.Add(j - i);
          inc(massiv);
          setlength(repeatCount2, massiv);
          repeatCount2[massiv]:=j-i;
          memo_nods.Text:=memo_nods.Text+' '+temp+inttostr(repeatCount2[massiv])+' '+inttostr(rsl)+#13#10;
        end;
         for k := 0 to length(repeatCount2) do
         begin
           for l := k+1 to length(repeatCount2) do
           begin

              rsl := gcd(repeatCount2[k], repeatCount2[l]);
              inc(nods[rsl]);
           end;
         end;
       end;
         setlength(repeatcount2, 0);
         massiv:=0;
       end;
     end;
    nods[0]:=0;
    possible_keys[key]:=0;
    for z := 1 to 5000 do
      begin
        nodsal[i]:=nodsal[i]+nods[i];
        if nods[i]>possible_keys[key] then
        begin
          possible_keys[key]:=nods[i];
          resul[key] := i;
        end;


      end;
  end;

  maxim:=0; res:=0;
  for i := 1 to 12 do
  begin
     if (possible_keys[i] > maxim) then
     begin
     maxim := possible_keys[i];
     res := resul[i];
     end;
  end;

  stringAns:='';
  if res<>0 then
  stringAns:=IntToStr(res)
  else
  stringAns:='Не найдена';
  Label2.Caption:=Label2.Caption + stringAns;




end;
       }

end.
